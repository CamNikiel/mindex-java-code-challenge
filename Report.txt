Project Overview:

This was the first time I had worked with both Gradle and Spring Boot. I found it both challenging
and interesting learning about Spring Boot and the way it handles create and read api requests. I
used the premade classes of the Employee object to base my Compensation and ReportingStructure classes
off of. However, with that being said, when working on both tasks, I ran into the error of
"HttpMessageNotReadableException" and "MismatchedInputException" on the postForEntity function calls.
I learned that this meant there was a invalid input or mismatch between the request or response endpoint.
I ran into this error while testing both the create and read functions. This did not allow me to test my
functions with the employee_database file, so I created a function for both tasks to test if the objects
are created and contain the correct values. While doing this for task 1, I ran into another error during
the assert statements. When trying to find the employeeListStructure and the numberOfEmployee reports,
the assert statement throws a nullPointerException. The Employee object that I was passing into the function
was asserting that it was notNull, meaning that the return from the function is null. Normally I would
debug and most likely be able to sold the problem, but I had trouble figuring out how to debug using
Gradle. I noticed the Employee classes used the Logger tool for this, so I tried that aswell. 

ReportStructure Type:

This type did not need to persist its data, therefor a repository was not needed for it. It needed the read
method as it was going to be accessing the employeeRepository to pull an existing employee, and create a
ReportStructure object off of it. As the objects functions all required the use of an employee, I required
one for the creation og a ReportStructure. Then using this employee I created two recursive funtions, one
to calculate the total reports of an Employee, and the other to create an EmployeeList object that contains
all of the employee's reports (including those reports of their reports) while also keeping the structure.
This EmployeeList is stored globally in the ReportingStructure type. I feel that this may be poor coding
practice, but with the function being recursive, I found it difficult to do another way.

Compensation Type:

While creating the compensation type, I knew that the values had to persist and be saved, so i created
a repository that I could read the values from after they had been created. The type only require a create
and read function to allow for this. Creating the object saves it to the repository and reading it pulls
the data from the repository.